import streamlit as st
import yfinance as yf
import altair as alt
import pandas as pd
import google.generativeai as genai
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
from pandas.tseries.offsets import DateOffset
import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
import os
import plotly.express as px


# Obtener la API Key de una variable de entorno
TOKEN_GENAI = os.getenv("TOKEN_GENAI")
genai.configure(api_key=TOKEN_GENAI)
model = genai.GenerativeModel("models/gemini-1.5-pro")


# Estilo general
dark_brown = "#3e1f14"
light_beige = "#fff5e6"
light_pink = "#f3c1c6"
pale_gold = "#d4a373"
girly_placeholder = "#a1887f"
bright_pink = "#e88f9c"


# CSS personalizado mejorado
theme_css = f"""
<style>
body, .main, .block-container {{
   background-color: {light_beige};
   color: {dark_brown};
}}


h1, h2, h3, h4, h5, h6, p, li, span, div, label, table, th, td {{
   color: {dark_brown} !important;
}}


[data-testid="stSidebar"] {{
   background-color: #fff1dc;
   color: {dark_brown};
}}


[data-testid="stSidebar"] .css-1d391kg, .css-qrbaxs {{
   color: {dark_brown};
}}


[data-testid="stMetricDelta"] {{
   color: {bright_pink};
}}


input, .stTextInput > div > input, .stButton > button {{
   background-color: #fffaf2;
   color: {dark_brown};
   border-color: {pale_gold};
}}


.stTextInput > div > input::placeholder {{
   color: {girly_placeholder};
}}


.stButton > button {{
   background-color: {bright_pink};
   color: white;
   border: 2px solid {dark_brown};
   font-weight: bold;
   transition: 0.3s;
   padding: 10px 20px;
   border-radius: 10px;
}}


.stButton > button:hover {{
   background-color: #f7d6db;
   color: {dark_brown};
}}


.stSelectbox > div > div {{
   background-color: white !important;
   color: {dark_brown} !important;
   border: 2px solid {dark_brown} !important;
   padding: 10px !important;
   border-radius: 8px !important;
   font-weight: bold !important;
   height: auto !important;
   min-height: 44px !important;
}}


.stSelectbox > div > div:hover {{
   border-color: {bright_pink} !important;
   box-shadow: 0 0 0 2px {light_pink} !important;
}}


.stSelectbox div[data-baseweb="select"] div[role="listbox"] {{
   background-color: white !important;
   color: {dark_brown} !important;
   border: 2px solid {dark_brown} !important;
   margin-top: 5px !important;
   border-radius: 8px !important;
   padding: 8px 0 !important;
}}


.stSelectbox div[data-baseweb="select"] div[role="option"] {{
   padding: 10px 16px !important;
   color: {dark_brown} !important;
   font-weight: normal !important;
}}


.stSelectbox div[data-baseweb="select"] div[role="option"]:hover {{
   background-color: {light_pink} !important;
   color: {dark_brown} !important;
}}


.stSelectbox div[data-baseweb="select"] div[role="option"][aria-selected="true"] {{
   background-color: {bright_pink} !important;
   color: white !important;
   font-weight: bold !important;
}}


.stDataFrame, .stTable {{
   border-collapse: collapse;
   width: 100%;
}}


th {{
   background-color: #f3c1c6;
   font-weight: bold;
}}


td {{
   border-top: 1px solid {dark_brown};
   padding: 10px;
}}


.element-container:has([data-testid="stPlotlyChart"]),
.element-container:has([data-testid="stAltairChart"]),
.element-container:has([data-testid="stPyplotChart"]) {{
   margin-bottom: 40px;
}}


.stExpander {{
   border: 2px solid {dark_brown};
   border-radius: 10px;
   background-color: {bright_pink};
   color: white;
   padding: 10px;
}}


.stExpander > div {{
   color: white;
   font-weight: bold;
}}
</style>
"""


# Aplicar tema
st.set_page_config(page_title="üå∏ Exploradora de Acciones con Estilo", layout="wide")
st.markdown(theme_css, unsafe_allow_html=True)


# Men√∫ lateral con nueva opci√≥n de portafolio
menu = st.sidebar.radio("üåü Men√∫", ["üîç An√°lisis de empresa", "üì∞ Buscar noticias", "üíº Portafolio de Inversi√≥n"])


if menu == "üîç An√°lisis de empresa":
   st.title("üíó Exploradora de Acciones para Mujeres Inversionistas")
   st.markdown("Bienvenida a tu espacio financiero ‚ú®\nAnaliza acciones con estilo, confianza y claridad üíñ")


   ticker_input = st.text_input("üîç Escribe el s√≠mbolo burs√°til (Ej. AAPL, MSFT, TSLA...):", placeholder="Ej. AAPL")
   periodo = st.selectbox("üïí Periodo a analizar:", ["6mo", "1y", "5y", "max"], index=0)


   if st.button("‚ú® Analizar empresa"):
       if ticker_input.strip():
           try:
               ticker = yf.Ticker(ticker_input.strip().upper())
               info = ticker.info


               if not info or info.get("regularMarketPrice") is None:
                   st.warning("üö´ No pudimos encontrar ese s√≠mbolo. ¬°Revisa que est√© bien escrito!")
               else:
                   nombre = info.get("longName", "Nombre no disponible")
                   descripcion = info.get("longBusinessSummary", "Descripci√≥n no disponible")
                   sector = info.get("sector", "No disponible")
                   industria = info.get("industry", "No disponible")
                   pais = info.get("country", "No disponible")
                   logo = info.get("logo_url", "")


                   st.markdown(f"## üíº {nombre}")
                   if logo:
                       st.image(logo, width=120)


                   prompt = f"""Traduce y adapta el siguiente texto al espa√±ol profesional, c√°lido y f√°cil de entender para mujeres que est√°n aprendiendo sobre inversiones:\n\nDescripci√≥n:\n{descripcion}\n\nSector: {sector}\nIndustria: {industria}\nPa√≠s: {pais}"""
                   try:
                       respuesta = model.generate_content(prompt)
                       traducido = respuesta.text
                   except:
                       traducido = descripcion


                   with st.expander("üå∑ ¬øQu√© hace esta empresa?", expanded=True):
                       st.markdown(traducido)


                   st.subheader("üìä Datos financieros clave")
                   claves = {
                       "üìà Precio actual": f"${info.get('regularMarketPrice', 'NA')}",
                       "üîÑ Cambio diario": f"{info.get('regularMarketChangePercent', 0):.2f}%",
                       "üè¢ Capitalizaci√≥n de mercado": info.get("marketCap", "NA"),
                       "üì¶ Volumen (hoy)": info.get("volume", "NA"),
                       "üìä Volumen promedio (30 d√≠as)": info.get("averageVolume", "NA"),
                       "üìö Ratio P/E": info.get("trailingPE", "NA"),
                       "üíµ Ganancias por acci√≥n (EPS)": info.get("trailingEps", "NA"),
                       "üìâ Beta (volatilidad hist√≥rica)": info.get("beta", "NA"),
                       "üóìÔ∏è Pr√≥ximo reporte de resultados": info.get("earningsDate", "NA")
                   }
                   st.table(pd.DataFrame.from_dict(claves, orient="index", columns=["Valor estimado"]))


                   hist = ticker.history(period=periodo).reset_index()
                   hist["MA20"] = hist["Close"].rolling(window=20).mean()


                   st.subheader("üìà Evoluci√≥n del precio y volumen")
                   precio = alt.Chart(hist).mark_line(color="#e88f9c").encode(x="Date:T", y="Close:Q")
                   promedio = alt.Chart(hist).mark_line(strokeDash=[4,4], color="#d4a373").encode(x="Date:T", y="MA20:Q")
                   volumen = alt.Chart(hist).mark_bar(opacity=0.3).encode(x="Date:T", y=alt.Y("Volume:Q", title="Volumen"))
                   st.altair_chart((precio + promedio) & volumen, use_container_width=True)
                   st.markdown("""
üå∏ **¬øQu√© vemos aqu√≠?** 
Esta gr√°fica muestra c√≥mo ha cambiado el precio de la acci√≥n en el tiempo (l√≠nea rosita), junto con un promedio de los √∫ltimos 20 d√≠as (l√≠nea dorada). 
La parte de barras indica qu√© tanto se ha movido la acci√≥n en volumen. 
Si la l√≠nea est√° subiendo, ¬°es una buena se√±al! üìà
""")


                   st.subheader("üìÜ Rendimiento anual compuesto (CAGR)")
                   hoy = hist["Date"].max()
                   rendimiento = {"Periodo": [], "CAGR": []}


                   def calcular_cagr(p0, pf, a√±os):
                       if p0 > 0 and a√±os > 0:
                           return (pf / p0) ** (1 / a√±os) - 1
                       return None


                   for a√±os in [1, 3, 5]:
                       fecha_inicio = hoy - DateOffset(years=a√±os)
                       datos = hist[hist["Date"] >= fecha_inicio]
                       if not datos.empty:
                           p0, pf = datos.iloc[0]["Close"], datos.iloc[-1]["Close"]
                           cagr = calcular_cagr(p0, pf, a√±os)
                           rendimiento["Periodo"].append(f"{a√±os} a√±o(s)")
                           rendimiento["CAGR"].append(f"{cagr*100:.2f}%" if cagr else "No disponible")
                       else:
                           rendimiento["Periodo"].append(f"{a√±os} a√±o(s)")
                           rendimiento["CAGR"].append("No disponible")


                   st.dataframe(pd.DataFrame(rendimiento))
                   st.markdown("""
üí° _El **CAGR** (Tasa de Crecimiento Anual Compuesto) nos dice qu√© tan r√°pido ha crecido (o no) una acci√≥n en promedio cada a√±o. 
Es como ver su evoluci√≥n con calma, sin preocuparnos por subidas o bajadas del d√≠a a d√≠a. Ideal para saber si una inversi√≥n ha sido buena a largo plazo._ ‚ú®
""")


                   st.subheader("üí´ Volatilidad del precio")
                   rend_diarios = hist["Close"].pct_change()
                   std_anual = np.std(rend_diarios) * np.sqrt(252)
                   st.metric("Desviaci√≥n est√°ndar anualizada", f"{std_anual * 100:.2f}%")
                   st.markdown("""
üå¨Ô∏è **¬øY esto qu√© significa?** 
La volatilidad mide qu√© tanto sube y baja el precio. 
Si es muy alta, puede ser una acci√≥n m√°s impredecible y riesgosa. 
Si es bajita, suele ser m√°s estable. ¬°Todo depende de tu estilo de inversi√≥n! üè¢
""")


                   st.subheader("üìâ Gr√°fica de cierre con l√≠nea de tendencia")
                   fig = px.line(hist, x="Date", y="Close", title="Precio de cierre con l√≠nea de tendencia", line_shape="linear")
                   fig.update_traces(line=dict(color=bright_pink))
                   st.plotly_chart(fig, use_container_width=True)
                   st.markdown("""
üìâ **¬øQu√© estamos viendo?** 
Esta l√≠nea muestra c√≥mo ha cerrado el precio de la acci√≥n cada d√≠a. 
Es √∫til para ver la direcci√≥n general del mercado: si va hacia arriba, abajo o si est√° estable. 
La l√≠nea te ayuda a ver la "historia" del precio de forma visual. üìà
""")


           except Exception as e:
               st.error(f"‚ö†Ô∏è Error: {str(e)}")
       else:
           st.warning("üîî Ingresa un s√≠mbolo para analizar.")


elif menu == "üì∞ Buscar noticias":
   st.title("üì∞ Buscador de Noticias Financieras")
   query = st.text_input("üîç Escribe el tema o empresa para buscar noticias recientes:", placeholder="Ej. Apple, Tesla, inflaci√≥n...")
   if st.button("Buscar Noticias"):
       if query.strip():
           try:
               url = f"https://news.google.com/search?q={query}+when:7d&hl=es-419&gl=MX&ceid=MX%3Aes-419"
               headers = {"User-Agent": "Mozilla/5.0"}
               response = requests.get(url, headers=headers)
               soup = BeautifulSoup(response.content, "html.parser")
               noticias = soup.select("article")


               if noticias:
                   for noticia in noticias[:5]:
                       titulo = noticia.text.strip()
                       enlace = noticia.find("a")
                       if enlace:
                           href = "https://news.google.com" + enlace["href"][1:]
                           st.markdown(f"- [{titulo}]({href})")
               else:
                   st.warning("No se encontraron noticias recientes sobre ese tema.")
           except:
               st.error("Hubo un error al buscar noticias. Intenta nuevamente m√°s tarde.")
       else:
           st.warning("Por favor ingresa un tema para buscar noticias.")

# NUEVO C√ìDIGO INTEGRADO: AN√ÅLISIS DE PORTAFOLIO
elif menu == "üíº Portafolio de Inversi√≥n":
    st.title("üå∏ Portafolio de Inversi√≥n üå∏")
    st.markdown("Bienvenida a tu espacio personalizado para visualizar tus inversiones üíº")
    st.markdown("Aqu√≠ podr√°s analizar el comportamiento hist√≥rico y proyectado de tu portafolio. Perfecto para mujeres emprendedoras y futuras inversionistas. üíñ")
    
    # Entrada de activos
    assets_input = st.text_input("üîç Escribe los s√≠mbolos de los activos separados por comas (ej. PG, AAPL, ^GSPC):", "PG, ^GSPC")
    assets = [a.strip().upper() for a in assets_input.split(",")]
    start_date = st.date_input("üìÖ Fecha de inicio de an√°lisis:", pd.to_datetime("2010-01-01"))
    
    # Descarga de datos
    pf_data = pd.DataFrame()
    for asset in assets:
        st.write(f"üîÑ Descargando datos para: {asset}")
        data = yf.download(asset, start=start_date.strftime('%Y-%m-%d'))
        if data.empty:
            st.warning(f"‚ùå No hay datos para {asset}")
            continue
        if 'Adj Close' in data.columns:
            pf_data[asset] = data['Adj Close']
        elif 'Close' in data.columns:
            pf_data[asset] = data['Close']
    
    # Mostrar datos
    if not pf_data.empty:
        st.subheader("üìä Datos hist√≥ricos de precios")
        st.markdown("Estos son los precios ajustados (o cierre) de tus activos seleccionados. Reflejan el valor de cada activo a lo largo del tiempo.")
        st.dataframe(pf_data.tail())
        
        st.subheader("üìà Desempe√±o normalizado desde el inicio (base 100)")
        st.markdown("Esta gr√°fica muestra c√≥mo ha cambiado el valor de cada activo desde la fecha de inicio. Todos comienzan en 100, para que puedas comparar su evoluci√≥n de forma clara.")
        norm_data = (pf_data / pf_data.iloc[0]) * 100
        st.line_chart(norm_data)
        
        # C√°lculo de log-returns
        log_returns = np.log(pf_data / pf_data.shift(1)).dropna()
        
        st.subheader("üìâ Rendimiento promedio anual üìÖ")
        st.markdown("Aqu√≠ puedes ver cu√°nto rinde en promedio cada activo al a√±o, basado en el rendimiento diario. Te da una idea del crecimiento esperado.")
        st.write(log_returns.mean() * 250)
        
        cov_matrix = log_returns.cov() * 250
        st.subheader("ü§ù Matriz de covarianza anualizada")
        st.markdown("La covarianza indica c√≥mo se mueven los activos juntos. Si dos activos tienen covarianza alta, suelen subir y bajar al mismo tiempo.")
        st.dataframe(cov_matrix)
        
        st.subheader("üìä Matriz de correlaci√≥n")
        st.markdown("La correlaci√≥n va de -1 a 1. Valores cercanos a 1 significan que los activos se mueven parecido, y cercanos a -1 que se mueven de forma opuesta. Ideal para diversificar tu portafolio.")
        st.dataframe(log_returns.corr())
        
        # Simulaci√≥n de portafolios
        st.subheader("üéØ Frontera eficiente (simulaci√≥n de 1000 portafolios)")
        st.markdown("Aqu√≠ simulamos 1000 combinaciones de inversi√≥n. Cada punto representa un portafolio con diferente mezcla de activos. Buscamos el mejor equilibrio entre **riesgo** (volatilidad) y **rendimiento**.")
        
        num_assets = len(assets)
        pfolio_returns = []
        pfolio_volatilities = []
        
        for _ in range(1000):
            weights = np.random.random(num_assets)
            weights /= np.sum(weights)
            pfolio_returns.append(np.sum(weights * log_returns.mean()) * 250)
            pfolio_volatilities.append(np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights))))
        
        portfolios = pd.DataFrame({
            'Return': pfolio_returns,
            'Volatility': pfolio_volatilities
        })
        
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.scatter(portfolios['Volatility'], portfolios['Return'], alpha=0.5, c='orchid')
        ax.set_xlabel('Volatilidad Esperada')
        ax.set_ylabel('Rendimiento Esperado')
        ax.set_title('Frontera Eficiente üå∑')
        st.pyplot(fig)
        
        st.markdown("üí° Busca los puntos m√°s arriba y hacia la izquierda: alto rendimiento y bajo riesgo. ¬°Eso es lo ideal!")
    else:
        st.info("Introduce s√≠mbolos v√°lidos para comenzar.")